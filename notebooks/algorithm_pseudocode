def findPath(location, iterationCount, destination, path):
  path.append(location)
  surroundingSpaces = getSurroundingSpaces(location)
  if iterationCount == 0:
    minSpace = getMin(surroundingSpaces)
    path.append(minSpace)
    return path
  else:
    potentialPaths = []
    for i in range(len(surroundingSpaces)):
      potentialPaths.append(findPath(surroundingSpaces[i], iterationCount - 1, destination, potentialPaths[i]))
    
    bestPath = potentialPaths[0]
    bestWeight = evalPath(potentialPaths[0], destination)
    for path in potentialPaths:
      if evalPath(path, destination) < bestWeight:
        bestPath = path
        bestWeight = evalPath(path, destination)
    return bestPath



=CONCATENATE(IF(COUNTIF(Attendance!C$2:C$190,C8), "Attended", "Not Found (Check Manually)"), " ", IF(COUNTIF(Attendance!K$178:K$190,C8), "Make-Up Meeting",""))

function findPath(location, iterationCount, destination, path);
  path.add(location)
  getSurroundingSpaces
  if iterationCount is 0:
    minSpace = min of getSurroundingSpaces
    path.add(minSpace)
    return path
  else
    new empty array potentialPaths
    for each surrounding space 
      potentialPaths[i] =  findPath(surrounding space, iterationCount -1, destination, potentialPath)
    bestPath = best of potentialPaths
    return bestPath





function findPath(location, destination, path);
  path.add(location)
  getSurroundingSpaces
  if location == destination:
    return path
  else
    new empty array potentialPaths
    for each surrounding space 
      potentialPaths[i] =  findPath(surrounding space, destination, potentialPath)
    bestPath = best of potentialPaths
    return bestPath
